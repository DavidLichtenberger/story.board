- if @text_component.errors.any?
  - @text_component.errors.full_messages.each do |message|
    .alert.alert-danger= message

- @text_components.each do |text_component|
  = render 'edit_modal', text_component: text_component

#modalTriggerText.modal.fade{"aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-dialog{:role => "document"}
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} Ã—
        %div
          / Nav tabs
          %ul.nav.nav-tabs{:role => "tablist"}
            %li{:role => "presentation"}
              %a{"aria-controls" => "use", "data-toggle" => "tab", :href => "#use", :role => "tab"} Use Trigger
            %li.active{:role => "presentation"}
              %a{"aria-controls" => "create", "data-toggle" => "tab", :href => "#create", :role => "tab"} Create with new Trigger
      .modal-body
        / Tab panes
        .tab-content
          #use.tab-pane{:role => "tabpanel"}
            / Modal 1
            .modal-inner
              .row
                .col-sm-12
                  %h2 New text component
                  %div.help Use an existing trigger
              .row
                .col-sm-12
                  = render 'form', text_component: @new_text_component
          #create.tab-pane.active{:role => "tabpanel"}
            / Modal 2
            .modal-inner
              .row
                .col-sm-12
                  = render 'form', text_component: @new_text_component, create_trigger: true

%h3 Text Components

- if user_signed_in?

  .d-flex.justify-content-start.py-4
    %div.mr-auto
      = form_tag(report_text_components_path(@report), {method: :get}) do
        .input-group
          .input-group-addon Assignee:
          = collection_select(:filter, :assignee_id, User.order('LOWER(name)'), :id, :name, { selected: @filter[:assignee_id], include_blank: 'All' }, { class: 'form-control custom-select', onchange: 'this.form.submit()' })
    %div
      %a.btn.btn-primary{:data => {:target => '#modalTriggerText', :toggle => 'modal'}, :href => '#'} New Text Component


%table.table.item-table
  %thead.thead-default
    %tr
      %th{width:'40%'} Trigger
      %th{width:'40%'} Headline
      %th Start
      %th End
      %th
  %tbody
    - @trigger_groups.each do |triggers, text_components|

      - text_components.each.with_index do |text_component, index|
        %tr
          -if index === 0
            %td{rowspan: text_components.count}
              .item-table__title
                .item-table__title__clip
                  %strong
                    =triggers.map(&:name).join(', ')

          = render 'text_component_row', text_component: text_component

    - if @text_components_without_triggers
      - @text_components_without_triggers.each.with_index do |text_component, index|
        %tr
          -if index === 0
            %td{rowspan: @text_components_without_triggers.count}
              .item-table__title
                .item-table__title__clip
                  %strong Text Components without Trigger
          = render 'text_component_row', text_component: text_component
